import{_ as a,c as r,a as t,o as n}from"./app-C1ZOz49-.js";const o={};function s(p,e){return n(),r("div",null,[...e[0]||(e[0]=[t("h2",{id:"概述",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#概述"},[t("span",null,"概述")])],-1),t("p",null,"为什么要测试代码？在现实世界中，您很可能不会有自动评分器。 当您的代码部署到生产环境中时，了解这一点非常重要 它将适用于简单的情况以及奇怪的边缘情况。",-1),t("p",null,"测试驱动开发当提供自动分级器时，它很容易上手 “autograder happy”。而不是真正理解 spec 和 要求，学生可能会编写一些基本实现，粉碎 他们针对 autograder 的代码，修复一些部分，然后重复，直到测试是 通过。这个过程往往有点漫长，真的不是最好的用途 的时间。我们将介绍一种新的编程方法，即测试驱动开发 （TDD），其中程序员在实际 函数。由于单元测试是在函数之前编写的，因此 隔离代码中的错误变得更加容易。此外，编写 单元测试要求您对任务有相对扎实的理解 你正在承担。这种方法的一个缺点是它可以公平地 慢，并且很容易忘记测试功能 彼此互动。",-1),t("p",null,"JUnit 测试JUnit 是用于调试程序的软件包 在 Java 中。来自 JUnit 的一个示例函数是 。此函数断言预期和 actual 具有相同的值。还有许多其他 JUnit 函数，如 、 和 .assertEquals(expected, actual)assertEqualsassertFalseassertNotNull",-1),t("p",null,"在编写 JUnit 测试时，最好编写 '@Test' 在正在测试的函数上方。这允许您的所有测试方法 以非静态方式运行。",-1)])])}const c=a(o,[["render",s]]),l=JSON.parse('{"path":"/cs61b/ap9navrj/","title":"3.Testing","lang":"zh-CN","frontmatter":{"title":"3.Testing","createTime":"2024/12/22 21:01:19","permalink":"/cs61b/ap9navrj/","description":"概述 为什么要测试代码？在现实世界中，您很可能不会有自动评分器。 当您的代码部署到生产环境中时，了解这一点非常重要 它将适用于简单的情况以及奇怪的边缘情况。 测试驱动开发当提供自动分级器时，它很容易上手 “autograder happy”。而不是真正理解 spec 和 要求，学生可能会编写一些基本实现，粉碎 他们针对 autograder 的代码，修...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.Testing\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-28T11:44:01.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://www.ajohn.top/cs61b/ap9navrj/"}],["meta",{"property":"og:site_name","content":"AJohn Blog"}],["meta",{"property":"og:title","content":"3.Testing"}],["meta",{"property":"og:description","content":"概述 为什么要测试代码？在现实世界中，您很可能不会有自动评分器。 当您的代码部署到生产环境中时，了解这一点非常重要 它将适用于简单的情况以及奇怪的边缘情况。 测试驱动开发当提供自动分级器时，它很容易上手 “autograder happy”。而不是真正理解 spec 和 要求，学生可能会编写一些基本实现，粉碎 他们针对 autograder 的代码，修..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-28T11:44:01.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-28T11:44:01.000Z"}]]},"readingTime":{"minutes":1.32,"words":396},"git":{"createdTime":1747823315000,"updatedTime":1761651841000,"contributors":[{"name":"zzyAJohn","username":"zzyAJohn","email":"1833302139@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/zzyAJohn?v=4","url":"https://github.com/zzyAJohn"}]},"autoDesc":true,"filePathRelative":"cs61b/3.Testing.md","headers":[]}');export{c as comp,l as data};
