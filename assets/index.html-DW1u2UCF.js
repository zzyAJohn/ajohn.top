import{_ as i,c as a,e as n,o as l}from"./app-C1ZOz49-.js";const e={};function t(h,s){return l(),a("div",null,[...s[0]||(s[0]=[n(`<h2 id="instructions" tabindex="-1"><a class="header-anchor" href="#instructions"><span>Instructions</span></a></h2><p>下载 hw02.zip。在存档中，您将找到一个名为 hw02.py 的文件，以及 ok 自动评分器的副本。</p><p>如果官方链接失效，你也可以通过我的 github 仓库 <a href="https://github.com/zzyAJohn/CS61A_Fall2024" target="_blank" rel="noopener noreferrer">CS61A_Fall2024</a>来获取我的代码。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>请注意，该代码包含答案，因此如果你想独立完成请务必提前将 hw02.py 中的答案删除！</p></div><p>提交：完成后，通过将您编辑的所有代码文件上传到 Gradescope 来提交作业。您可以在截止日期前多次提交；只有最后一次提交才会被评分。检查您是否已成功在 Gradescope 上提交了代码。有关提交作业的更多说明，请参阅实验 0。</p><p>使用 Ok：如果您对使用 Ok 有任何疑问，请参阅本指南。</p><p>阅读材料：您可能会发现以下参考资料很有用：</p><p>第 1.6 节 评分：作业根据正确性进行评分。每个错误的问题都会使总分减少一分。这项作业满分为 2 分。</p><h2 id="required-questions" tabindex="-1"><a class="header-anchor" href="#required-questions"><span>Required Questions</span></a></h2><p>几个文档测试引用了这些功能：</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-py"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> operator </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> mul</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">square </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> lambda</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">identity </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> lambda</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">triple </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> lambda</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">increment </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> lambda</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="higher-order-functions" tabindex="-1"><a class="header-anchor" href="#higher-order-functions"><span>Higher-Order Functions</span></a></h2><h3 id="q1-product" tabindex="-1"><a class="header-anchor" href="#q1-product"><span>Q1: Product</span></a></h3><p>编写一个名为 <code>product</code> 的函数，返回序列前 <code>n</code> 个项的乘积。具体来说， <code>product</code> 接受整数 <code>n</code> 和 <code>term</code> ，后者是一个确定序列的单参数函数。（也就是说， <code>term(i)</code> 给出序列的第 <code>i</code> 个项。） <code>product(n, term)</code> 应该返回 <code>term(1) * ... * term(n)</code> 。</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-py"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> product</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Return the product of the first n terms in a sequence.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    n: a positive integer</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    term:  a function that takes one argument to produce the term</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product(3, identity)  # 1 * 2 * 3</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    6</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product(5, identity)  # 1 * 2 * 3 * 4 * 5</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    120</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product(3, square)    # 1^2 * 2^2 * 3^2</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    36</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product(5, square)    # 1^2 * 2^2 * 3^2 * 4^2 * 5^2</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    14400</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product(3, increment) # (1+1) * (2+1) * (3+1)</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    24</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product(3, triple)    # 1*3 * 2*3 * 3*3</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    162</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">*** YOUR CODE HERE ***</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Ok 来测试你的代码：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">python</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ok</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -q</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> product</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><details class="hint-container details"><summary>点击查看答案</summary><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark has-diff vp-code"><code class="language-py"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> product</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Return the product of the first n terms in a sequence.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    n: a positive integer</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    term:  a function that takes one argument to produce the term</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product(3, identity)  # 1 * 2 * 3</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    6</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product(5, identity)  # 1 * 2 * 3 * 4 * 5</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    120</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product(3, square)    # 1^2 * 2^2 * 3^2</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    36</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product(5, square)    # 1^2 * 2^2 * 3^2 * 4^2 * 5^2</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    14400</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product(3, increment) # (1+1) * (2+1) * (3+1)</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    24</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product(3, triple)    # 1*3 * 2*3 * 3*3</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    162</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">*** YOUR CODE HERE ***</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line diff add"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    res </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line diff add"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line diff add"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line diff add"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        res  </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">*=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line diff add"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">+=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line diff add"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> res </span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="q2-accumulate" tabindex="-1"><a class="header-anchor" href="#q2-accumulate"><span>Q2: Accumulate</span></a></h3><p>让我们看一下 <code>product</code> 是如何成为我们想要实现的更通用的 <code>accumulate</code> 函数的一个实例的：</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-py"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> accumulate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fuse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Return the result of fusing together the first n terms in a sequence </span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    and start.  The terms to be fused are term(1), term(2), ..., term(n). </span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    The function fuse is a two-argument commutative &amp; associative function.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    15</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    26</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">accumulate(add, 11, 0, identity) # 11 (fuse is never used)</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    11</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    25</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">accumulate(mul, 2, 3, square)    # 2 * 1^2 * 2^2 * 3^2</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    72</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"># 2 + (1^2 + 1) + (2^2 + 1) + (3^2 + 1)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">accumulate(lambda x, y: x + y + 1, 2, 3, square)</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    19</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">*** YOUR CODE HERE ***</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>accumulate</code> 具有以下参数：</p><ul><li><code>fuse</code> ：一个双参数函数，指定当前项如何与先前累积的项融合</li><li><code>start</code> ：开始累积的值</li><li><code>n</code> ：一个非负整数，表示要融合的项数</li><li><code>term</code> ：一个单参数函数；term(i) 是序列的第 i 个项 实现 <code>accumulate</code> ，使用 <code>fuse</code> 函数将 <code>term</code> 定义的序列的前 <code>n</code> 个项与 <code>start</code> 值融合。</li></ul><p>例如， <code>accumulate(add, 11, 3, square)</code> 的结果是</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-py"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">11</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">square</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">square</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  square</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))))</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    11</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     square</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    square</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> square</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">    =</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    11</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">         +</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    4</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">         +</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 9</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">            =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 25</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设 <code>fuse</code> 是可交换的， <code>fuse(a, b) == fuse(b, a)</code> ，并且是结合的， <code>fuse(fuse(a, b), c) == fuse(a, fuse(b, c))</code> 。</p><p>然后，将 <code>summation</code> （来自讲座）和 <code>product</code> 实现为一行调用以进行 <code>accumulate</code> 。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>summation_using_accumulate</code> 和 <code>product_using_accumulate</code> 都应使用以 <code>return</code> 开头的一行代码来实现。</p></div><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-py"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> summation_using_accumulate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Returns the sum: term(1) + ... + term(n), using accumulate.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">summation_using_accumulate(5, square) # square(1) + square(2) + ... + square(4) + square(5)</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    55</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">summation_using_accumulate(5, triple) # triple(1) + triple(2) + ... + triple(4) + triple(5)</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    45</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"># This test checks that the body of the function is just a return statement.</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">import inspect, ast</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[type(x).__name__ for x in ast.parse(inspect.getsource(summation_using_accumulate)).body[0].body]</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    [&#39;Expr&#39;, &#39;Return&#39;]</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> ____</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> product_using_accumulate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Returns the product: term(1) * ... * term(n), using accumulate.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product_using_accumulate(4, square) # square(1) * square(2) * square(3) * square()</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    576</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product_using_accumulate(6, triple) # triple(1) * triple(2) * ... * triple(5) * triple(6)</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    524880</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"># This test checks that the body of the function is just a return statement.</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">import inspect, ast</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[type(x).__name__ for x in ast.parse(inspect.getsource(product_using_accumulate)).body[0].body]</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    [&#39;Expr&#39;, &#39;Return&#39;]</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> ____</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Ok 来测试你的代码：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">python</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ok</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -q</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> accumulate</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">python</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ok</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -q</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> summation_using_accumulate</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">python</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ok</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -q</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> product_using_accumulate</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点击查看答案</summary><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark has-diff vp-code"><code class="language-py"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> accumulate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fuse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Return the result of fusing together the first n terms in a sequence </span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    and start.  The terms to be fused are term(1), term(2), ..., term(n). </span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    The function fuse is a two-argument commutative &amp; associative function.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    15</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    26</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">accumulate(add, 11, 0, identity) # 11 (fuse is never used)</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    11</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    25</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">accumulate(mul, 2, 3, square)    # 2 * 1^2 * 2^2 * 3^2</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    72</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"># 2 + (1^2 + 1) + (2^2 + 1) + (3^2 + 1)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">accumulate(lambda x, y: x + y + 1, 2, 3, square)</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    19</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">*** YOUR CODE HERE ***</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line diff add"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    res </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> start </span></span>
<span class="line diff add"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line diff add"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line diff add"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        res </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fuse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line diff add"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">+=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line diff add"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> res </span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>点击查看答案</summary><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark has-diff vp-code"><code class="language-py"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> summation_using_accumulate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Returns the sum: term(1) + ... + term(n), using accumulate.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">summation_using_accumulate(5, square) # square(1) + square(2) + ... + square(4) + square(5)</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    55</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">summation_using_accumulate(5, triple) # triple(1) + triple(2) + ... + triple(4) + triple(5)</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    45</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"># This test checks that the body of the function is just a return statement.</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">import inspect, ast</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[type(x).__name__ for x in ast.parse(inspect.getsource(summation_using_accumulate)).body[0].body]</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    [&#39;Expr&#39;, &#39;Return&#39;]</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span></span>
<span class="line diff add"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> accumulate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> product_using_accumulate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Returns the product: term(1) * ... * term(n), using accumulate.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product_using_accumulate(4, square) # square(1) * square(2) * square(3) * square()</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    576</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">product_using_accumulate(6, triple) # triple(1) * triple(2) * ... * triple(5) * triple(6)</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    524880</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"># This test checks that the body of the function is just a return statement.</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">import inspect, ast</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[type(x).__name__ for x in ast.parse(inspect.getsource(product_using_accumulate)).body[0].body]</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    [&#39;Expr&#39;, &#39;Return&#39;]</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span></span>
<span class="line diff add"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> accumulate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mul</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="q3-make-repeater" tabindex="-1"><a class="header-anchor" href="#q3-make-repeater"><span>Q3: Make Repeater</span></a></h3><p>实现 <code>make_repeater</code> 函数，该函数接受一个参数函数 <code>f</code> 和一个正整数 <code>n</code> 。它返回一个参数函数，其中 <code>make_repeater(f, n)(x)</code> 返回 <code>f(f(...f(x)...))</code> 的值，其中 <code>f</code> 被应用到 <code>x</code> <code>n</code> 次。例如，<code>make_repeater(square, 3)(5)</code> 将 5 的平方计算三次并返回 390625，就像 <code>square(square(square(5)))</code> 一样。</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-py"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> make_repeater</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Returns the function that computes the nth application of f.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">add_three = make_repeater(increment, 3)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">add_three(5)</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    8</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">make_repeater(triple, 5)(1) # 3 * (3 * (3 * (3 * (3 * 1))))</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    243</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">make_repeater(square, 2)(5) # square(square(5))</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    625</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">make_repeater(square, 3)(5) # square(square(square(5)))</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    390625</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">*** YOUR CODE HERE ***</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Ok 来测试你的代码：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">python</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ok</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -q</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> make_repeater</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><details class="hint-container details"><summary>点击查看答案</summary><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark has-diff vp-code"><code class="language-py"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> make_repeater</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Returns the function that computes the nth application of f.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">add_three = make_repeater(increment, 3)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">add_three(5)</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    8</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">make_repeater(triple, 5)(1) # 3 * (3 * (3 * (3 * (3 * 1))))</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    243</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">make_repeater(square, 2)(5) # square(square(5))</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    625</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    &gt;&gt;&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">make_repeater(square, 3)(5) # square(square(square(5)))</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    390625</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">*** YOUR CODE HERE ***</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line diff add"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> repeater</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line diff add"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span></span>
<span class="line diff add"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        res </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x </span></span>
<span class="line diff add"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line diff add"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            res </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line diff add"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">+=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line diff add"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> res </span></span>
<span class="line diff add"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> repeater </span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="check-your-score-locally" tabindex="-1"><a class="header-anchor" href="#check-your-score-locally"><span>Check Your Score Locally</span></a></h2><p>您可以通过运行来在本地检查此作业的每个问题的分数：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">python</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ok</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --score</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><details class="hint-container details"><summary>我的得分：</summary><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">PS</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> D:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ithub</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\C</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">S61A_Fall2024</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\h</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">w</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\h</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">w0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">2&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> python</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ok</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --score</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=====================================================================</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Assignment:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Homework</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OK,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> version</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> v1.18.1</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=====================================================================</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">~</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Scoring</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tests</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">---------------------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Doctests</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> for</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> product</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">from</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hw02</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> import</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">product(3,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> identity</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 1 * 2 * 3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">6</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">product(5,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> identity</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 1 * 2 * 3 * 4 * 5</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">120</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">product(3,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> square</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)    </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 1^2 * 2^2 * 3^2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">36</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">product(5,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> square</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)    </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 1^2 * 2^2 * 3^2 * 4^2 * 5^2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">14400</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">product(3,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> increment</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># (1+1) * (2+1) * (3+1)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">24</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">product(3,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> triple</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)    </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 1*3 * 2*3 * 3*3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">162</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Score:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 1.0/1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">---------------------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Doctests</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> for</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> accumulate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">from</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hw02</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> import</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">accumulate(add,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 5,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> identity</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 0 + 1 + 2 + 3 + 4 + 5</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">15</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">accumulate(add,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 11,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 5,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> identity</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 11 + 1 + 2 + 3 + 4 + 5</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">26</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">accumulate(add,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 11,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> identity</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 11 (fuse is never used)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">11</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">accumulate(add,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 11,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 3,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> square</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)   </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 11 + 1^2 + 2^2 + 3^2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">25</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">accumulate(mul,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 2,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 3,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> square</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)    </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 2 * 1^2 * 2^2 * 3^2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">72</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 2 + (1^2 + 1) + (2^2 + 1) + (3^2 + 1)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">accumulate(lambda</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> x,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> y:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> x</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> +</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> y</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> +</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 1,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 2,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 3,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> square</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">19</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Score:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 1.0/1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">---------------------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Doctests</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> for</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> summation_using_accumulate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">from</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hw02</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> import</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">summation_using_accumulate(5,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> square</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># square(1) + square(2) + ... + square(4) + square(5)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">55</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">summation_using_accumulate(5,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> triple</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># triple(1) + triple(2) + ... + triple(4) + triple(5)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">45</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># This test checks that the body of the function is just a return statement.</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">import</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> inspect,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ast</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.__name__ for x in ast.parse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">inspect</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">getsource</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">summation_using_accumulate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">).body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Expr</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Score:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 1.0/1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">---------------------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Doctests</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> for</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> product_using_accumulate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">from</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hw02</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> import</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">product_using_accumulate(4,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> square</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># square(1) * square(2) * square(3) * square()</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">576</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">product_using_accumulate(6,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> triple</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># triple(1) * triple(2) * ... * triple(5) * triple(6)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">524880</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># This test checks that the body of the function is just a return statement.</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">import</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> inspect,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ast</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.__name__ for x in ast.parse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">inspect</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">getsource</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">product_using_accumulate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">).body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Expr</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Score:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 1.0/1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">---------------------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Doctests</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> for</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> make_repeater</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">from</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hw02</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> import</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_three</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> make_repeater</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">increment,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_three(5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">8</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">make_repeater(triple,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 3 * (3 * (3 * (3 * (3 * 1))))</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">243</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">make_repeater(square,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># square(square(5))</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">625</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;&gt;&gt; </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">make_repeater(square,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># square(square(square(5)))</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">390625</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Score:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 1.0/1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">---------------------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Point</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> breakdown</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    product:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 1.0/1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    accumulate:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 1.0/1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    summation_using_accumulate:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 1.0/1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    product_using_accumulate:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 1.0/1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    make_repeater:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 1.0/1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Score:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    Total:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Backup...</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> complete</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Backup</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> past</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> deadline</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> by</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 186</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> days,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 18</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hours,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 13</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> minutes,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> and</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 11</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> seconds</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Backup</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> successful</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> for</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> user:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> zhiyong947@gmail.com</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">URL:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://okpy.org/cal/cs61a/fa24/hw02/backups/jLYx7y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OK</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> is</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> up</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> date</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">PS</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> D:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ithub</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\C</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">S61A_Fall2024</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\h</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">w</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\h</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">w0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">2&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>这不会提交作业！当您对分数满意时，请将作业提交给 Gradescope 以获得学分。</p>`,44)])])}const p=i(e,[["render",t]]),d=JSON.parse('{"path":"/cs61a/homework-hw02/","title":"Homework 2: Higher-Order Functions","lang":"zh-CN","frontmatter":{"title":"Homework 2: Higher-Order Functions","tags":["CS61A","Berkeley","Python"],"createTime":"2024/11/11 08:55:43","permalink":"/cs61a/homework-hw02/","description":"Instructions 下载 hw02.zip。在存档中，您将找到一个名为 hw02.py 的文件，以及 ok 自动评分器的副本。 如果官方链接失效，你也可以通过我的 github 仓库 CS61A_Fall2024来获取我的代码。 重要 请注意，该代码包含答案，因此如果你想独立完成请务必提前将 hw02.py 中的答案删除！ 提交：完成后，通过将您...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Homework 2: Higher-Order Functions\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-28T11:44:01.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://www.ajohn.top/cs61a/homework-hw02/"}],["meta",{"property":"og:site_name","content":"AJohn Blog"}],["meta",{"property":"og:title","content":"Homework 2: Higher-Order Functions"}],["meta",{"property":"og:description","content":"Instructions 下载 hw02.zip。在存档中，您将找到一个名为 hw02.py 的文件，以及 ok 自动评分器的副本。 如果官方链接失效，你也可以通过我的 github 仓库 CS61A_Fall2024来获取我的代码。 重要 请注意，该代码包含答案，因此如果你想独立完成请务必提前将 hw02.py 中的答案删除！ 提交：完成后，通过将您..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-28T11:44:01.000Z"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:tag","content":"Berkeley"}],["meta",{"property":"article:tag","content":"CS61A"}],["meta",{"property":"article:modified_time","content":"2025-10-28T11:44:01.000Z"}]]},"readingTime":{"minutes":7.31,"words":2192},"git":{"createdTime":1742346864000,"updatedTime":1761651841000,"contributors":[{"name":"zzyAJohn","username":"zzyAJohn","email":"1833302139@qq.com","commits":4,"avatar":"https://avatars.githubusercontent.com/zzyAJohn?v=4","url":"https://github.com/zzyAJohn"}]},"autoDesc":true,"filePathRelative":"cs61a/homework/hw02.md","headers":[]}');export{p as comp,d as data};
