import{_ as k,c as r,a as i,b as a,e as h,w as t,r as p,o as d}from"./app-C1ZOz49-.js";const g={};function y(c,s){const n=p("PDFViewer"),l=p("VPCard"),e=p("VPCardGrid");return d(),r("div",null,[s[2]||(s[2]=i("h2",{id:"_1-c-编程简介",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_1-c-编程简介"},[i("span",null,"1. C++编程简介")])],-1)),a(n,{src:"https://oss.ajohn.top/blog/pdf/oop1.pdf",page:1,zoom:50,width:"100%",height:"",ratio:"",title:"oop1.pdf"}),s[3]||(s[3]=i("p",null,"略",-1)),s[4]||(s[4]=i("h2",{id:"_2-头文件与类的声明",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_2-头文件与类的声明"},[i("span",null,"2. 头文件与类的声明")])],-1)),s[5]||(s[5]=i("h3",{id:"_2-1-header-头文件-中的防御式声明",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_2-1-header-头文件-中的防御式声明"},[i("span",null,"2.1 Header (头文件) 中的防御式声明")])],-1)),a(n,{src:"https://oss.ajohn.top/blog/pdf/oop1.pdf",page:18,zoom:50,width:"100%",height:"",ratio:"",title:"oop1.pdf"}),s[6]||(s[6]=i("h3",{id:"_2-2-inline-内联-函數",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_2-2-inline-内联-函數"},[i("span",null,"2.2 inline (内联) 函數")])],-1)),a(n,{src:"https://oss.ajohn.top/blog/pdf/oop1.pdf",page:22,zoom:50,width:"100%",height:"",ratio:"",title:"oop1.pdf"}),s[7]||(s[7]=h(`<blockquote><p>参考《Effective C++》条款30：透彻了解 inlining 的里里外外</p></blockquote><h2 id="_3-构造函数" tabindex="-1"><a class="header-anchor" href="#_3-构造函数"><span>3. 构造函数</span></a></h2><h3 id="_3-1-constructor-ctor-构造函数" tabindex="-1"><a class="header-anchor" href="#_3-1-constructor-ctor-构造函数"><span>3.1 constructor (ctor, 构造函数)</span></a></h3><p>构造函数最好使用成员初值列(member initialization list)，而不要在构造函数本体内使用赋值操作(assignment)。初值列列出的成员变量，其排列次序应该和它们在 class 中的声明次序相同。</p><blockquote><p>参考《Effective C++》条款04：确定对象被使用前已先被初始化</p></blockquote><h3 id="_3-2-ctors放在private-区" tabindex="-1"><a class="header-anchor" href="#_3-2-ctors放在private-区"><span>3.2 ctors放在private 区</span></a></h3><p>构造函数绝大多数都是 public 的，除非只想使用一个对象，也就是设计模式中的单例模式(Singleton)。</p><h3 id="_3-3-constmember-functions-常量成员函数" tabindex="-1"><a class="header-anchor" href="#_3-3-constmember-functions-常量成员函数"><span>3.3 constmember functions (常量成员函数)</span></a></h3><p>将某些东西声明为const可帮助编译器侦测出错误用法。const可被施加于任何作用域内的对象、函数参数、函数返回类型、成员函数本体。</p><blockquote><p>参考《Effective C++》条款03：尽可能使用 const</p></blockquote><h2 id="_4-参数传递与返回值" tabindex="-1"><a class="header-anchor" href="#_4-参数传递与返回值"><span>4. 参数传递与返回值</span></a></h2><h3 id="_4-1-参数传递-pass-by-value-vs-pass-by-reference-to-const" tabindex="-1"><a class="header-anchor" href="#_4-1-参数传递-pass-by-value-vs-pass-by-reference-to-const"><span>4.1 参数传递：pass by value vs. pass by reference (to const)</span></a></h3><p>尽量以 pass-by-reference-to-const 替换 pass-by-value。前者通常比较高效，并可避免切割问题(slicing problem)。当然，以上规则并不适用于内置类型，以及STL的迭代器和函数对象。对它们而言 pass-by-value 往往比较适当。</p><blockquote><p>参考《Effective C++》条款20：宁以 pass-by-reference-to-const 替换 pass-by-value</p></blockquote><h3 id="_4-2-返回值传递-return-by-value-vs-return-by-reference-to-const" tabindex="-1"><a class="header-anchor" href="#_4-2-返回值传递-return-by-value-vs-return-by-reference-to-const"><span>4.2 返回值传递：return by value vs. return by reference (to const)</span></a></h3><p>和上小节一样，通常也建议返回reference，除非是需要返回一个local object，在经过作用域后局部对象的生命已经结束了，此时返回指向它的指针没有意义。因此绝不要返回 pointer 或 reference 指向一个 local stack 对象，或返回 reference 指向一个 heap-allocated 对象，或返回 pointer 或 reference 指向一个 local static 对象而有可能同时需要多个这样的对象。</p><blockquote><p>参考《Effective C++》条款21：必须返回对象时，别妄想返回其 reference</p></blockquote><h3 id="_4-3-相同-class-的各个-objects-互为-friends-友元" tabindex="-1"><a class="header-anchor" href="#_4-3-相同-class-的各个-objects-互为-friends-友元"><span>4.3 相同 class 的各个 objects 互为 friends (友元)</span></a></h3><p>很怪，object c1可以调用object c2的成员函数，而不涉及到c2的计算，但也被允许。</p><h2 id="_5-操作符重载与临时对象" tabindex="-1"><a class="header-anchor" href="#_5-操作符重载与临时对象"><span>5. 操作符重载与临时对象</span></a></h2><h3 id="_5-1-operator-overloading-操作符重载-1-成员函数-this" tabindex="-1"><a class="header-anchor" href="#_5-1-operator-overloading-操作符重载-1-成员函数-this"><span>5.1 operator overloading (操作符重载-1, 成员函数) this</span></a></h3><p>对于成员函数，都有一个隐藏的参数this，谁调用，this就指向谁。</p><h3 id="_5-2-return-by-reference-语法分析" tabindex="-1"><a class="header-anchor" href="#_5-2-return-by-reference-语法分析"><span>5.2 return by reference 语法分析</span></a></h3><p>传输者无需知到接受者是以reference形式接受。</p><p>为了能够保持C语言风格的连续赋值，需要把 += &lt;&lt; == 这类操作符重载的返回类型设置为对应类型的 <code>complex&amp;</code> <code>ostream&amp;</code> 。</p><h3 id="_5-3-operator-overloading-操作符重载-2-非成员函数-无this" tabindex="-1"><a class="header-anchor" href="#_5-3-operator-overloading-操作符重载-2-非成员函数-无this"><span>5.3 operator overloading (操作符重载-2, 非成员函数) (无this)</span></a></h3><p>非成员函数主要是操作传进来的参数，注意返回时很可能是新创建一个local objec，因此要以value形式返回。</p><h2 id="_6-复习complex类的实现过程" tabindex="-1"><a class="header-anchor" href="#_6-复习complex类的实现过程"><span>6. 复习Complex类的实现过程</span></a></h2><h3 id="_6-1-complex-编程示例" tabindex="-1"><a class="header-anchor" href="#_6-1-complex-编程示例"><span>6.1 complex 编程示例：</span></a></h3><p>这是一个有关 Class without pointer member(s) 的例子：</p><ul><li>定义复数（complex）class</li><li>要求有实部和虚部，获取实部和虚部，</li><li>成员重载+=运算符，非成员重载三种+，重载cout</li></ul><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 测试用例</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	complex </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">c1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">9</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	complex </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">c2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	c1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	c1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">	5</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	c1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c2 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c2 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>参考答案</summary><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">iostream</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> namespace</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> complex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	complex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">double</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> double</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> real</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> imag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	double</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getReal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">		return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> real</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	double</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getImag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">		return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> imag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">	complex</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> operator</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">+=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> complex</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	double</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> real</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	double</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> imag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">complex</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> complex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">operator</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">+=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> complex</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">	this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">real</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getReal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">	this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">imag</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getImag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">complex</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> operator</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">+</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> complex</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> complex</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	return</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> complex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getReal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getReal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getImag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getImag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">complex</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> operator</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">+</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> complex</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> double</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	return</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> complex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getReal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getImag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">complex</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> operator</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">+</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">double</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> complex</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	return</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> complex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getReal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getImag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ostream</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> operator</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&lt;&lt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ostream</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> os</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> complex</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> os </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getReal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getImag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	complex </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">c1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">9</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	complex </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">c2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	c1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	c1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">	5</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	c1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c2 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c2 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_7-三大函数-拷贝构造-拷贝赋值-析构" tabindex="-1"><a class="header-anchor" href="#_7-三大函数-拷贝构造-拷贝赋值-析构"><span>7. 三大函数：拷贝构造，拷贝赋值，析构</span></a></h2><p>接下来是一个有关 Class with pointer member(s) 的例子：</p>`,35)),a(n,{src:"https://oss.ajohn.top/blog/pdf/oop1.pdf",page:50,zoom:50,width:"100%",height:"",ratio:"",title:"oop1.pdf"}),s[8]||(s[8]=h(`<h3 id="_7-1-big-three-三個特殊函數" tabindex="-1"><a class="header-anchor" href="#_7-1-big-three-三個特殊函數"><span>7.1 Big Three, 三個特殊函數</span></a></h3><p>这里介绍了构造函数、拷贝构造、拷贝赋值构造(copy assignment)</p><h3 id="_7-2-ctor和dtor-构造函數和析构函數" tabindex="-1"><a class="header-anchor" href="#_7-2-ctor和dtor-构造函數和析构函數"><span>7.2 ctor和dtor(构造函數和析构函數)</span></a></h3><p>在构造函数内申请开辟内存后要在析构函数手动释放内存。</p><h3 id="_7-3-class-with-pointer-members-必须有-copy-ctor-和-copy-op" tabindex="-1"><a class="header-anchor" href="#_7-3-class-with-pointer-members-必须有-copy-ctor-和-copy-op"><span>7.3 class with pointer members 必须有 copy ctor 和 copy op=</span></a></h3><p>编译器可以暗自为 class 创建 default构造函数、copy构造函数、copy assignment 操作符，以及析构函数，而类带指针需要自己设计拷贝构造和拷贝赋值，不能使用默认提供的copy构造函数、和copy assignment 操作符，避免浅拷贝</p><blockquote><p>详情见《Effective C++》条款05：了解C++默默编写并调用哪些函数</p></blockquote><h3 id="_7-4-copy-ctor-拷贝构造函數" tabindex="-1"><a class="header-anchor" href="#_7-4-copy-ctor-拷贝构造函數"><span>7.4 copy ctor (拷贝构造函數)</span></a></h3><p>设计拷贝构造的时候，可以直接取另一个传进来 object 的 private data，因为兄弟之间互为 friend</p><h3 id="_7-5-copy-assignment-operator-拷贝赋值函数" tabindex="-1"><a class="header-anchor" href="#_7-5-copy-assignment-operator-拷贝赋值函数"><span>7.5 copy assignment operator (拷贝赋值函数)</span></a></h3><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">inline</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">String</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">operator</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> String</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    delete[]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    m_data </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> strlen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ];</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    strcpy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拷贝赋值操作顺序：</p><ol><li>删除原有数据</li><li>新开辟一段拷贝内容大小的空间</li><li>将拷贝内容复制到开辟的空间</li></ol><h3 id="_7-6-一定要在operator-中檢查是否self-assignment" tabindex="-1"><a class="header-anchor" href="#_7-6-一定要在operator-中檢查是否self-assignment"><span>7.6 一定要在operator= 中檢查是否self assignment</span></a></h3><p>拷贝赋值中注意需要检测自我赋值，直接返回即可，确保效率和正确性</p><blockquote><p>详情见《Effective C++》条款 11：在operator= 中处理“自我赋值”</p></blockquote><h2 id="_8-堆-栈与内存管理" tabindex="-1"><a class="header-anchor" href="#_8-堆-栈与内存管理"><span>8. 堆，栈与内存管理</span></a></h2><h3 id="_8-1-所谓stack-栈-所谓-heap-堆" tabindex="-1"><a class="header-anchor" href="#_8-1-所谓stack-栈-所谓-heap-堆"><span>8.1 所谓stack (栈), 所谓 heap (堆)</span></a></h3><p>普通变量存放于栈区，关键字 new 开辟出的变量存放于堆区。</p><h3 id="_8-2-stack-objects-的生命期" tabindex="-1"><a class="header-anchor" href="#_8-2-stack-objects-的生命期"><span>8.2 stack objects 的生命期</span></a></h3><p>所谓stack object，其生命在作用域(scope) 结束之际结束。又称为auto object，因为它会被「自动」清理。</p><h3 id="_8-3-static-local-objects-的生命周期" tabindex="-1"><a class="header-anchor" href="#_8-3-static-local-objects-的生命周期"><span>8.3 static local objects 的生命周期</span></a></h3><p>static object，其生命在作用域(scope) 结束之后仍然存在，直到整个程序结束。</p><h3 id="_8-4-global-objects-的生命周期" tabindex="-1"><a class="header-anchor" href="#_8-4-global-objects-的生命周期"><span>8.4 global objects 的生命周期</span></a></h3><p>global object，其生命在整个程序结束之后 才结束。你也可以把它视为一种static object，其作用域 是「整个程序」。</p><h3 id="_8-5-heap-objects-的生命周期" tabindex="-1"><a class="header-anchor" href="#_8-5-heap-objects-的生命周期"><span>8.5 heap objects 的生命周期</span></a></h3><p>指针P 指向一个new创建的对象便是heap object，其生命在它被deleted之际结束。</p><p>如果当作用域结束，p所指的heap object 仍然存在，但指针p的生命却结束了，作用域之外再也看不到p (也就没机会delete p）</p><h3 id="_8-6-new-先分配memory-再调用ctor" tabindex="-1"><a class="header-anchor" href="#_8-6-new-先分配memory-再调用ctor"><span>8.6 new：先分配memory, 再调用ctor</span></a></h3>`,29)),a(n,{src:"https://oss.ajohn.top/blog/pdf/oop1.pdf",page:66,zoom:50,width:"100%",height:"",ratio:"",title:"oop1.pdf"}),s[9]||(s[9]=i("p",null,"这一行代码可以分解成三个步骤：",-1)),s[10]||(s[10]=i("ol",null,[i("li",null,"分配内存，底层使用C语言的 malloc 函数实现"),i("li",null,"转型，void* 转成 Complex*"),i("li",null,"构造函数")],-1)),s[11]||(s[11]=i("h3",{id:"_8-7-delete-先调用dtor-再释放memory",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_8-7-delete-先调用dtor-再释放memory"},[i("span",null,"8.7 delete：先调用dtor, 再释放memory")])],-1)),a(n,{src:"https://oss.ajohn.top/blog/pdf/oop1.pdf",page:67,zoom:50,width:"100%",height:"",ratio:"",title:"oop1.pdf"}),s[12]||(s[12]=h(`<p>这一行代码可以分解成三个步骤：</p><ol><li>调用析构函数</li><li>操作符delete释放内存，底层使用C语言的 free 函数实现</li></ol><h3 id="_8-8-array-new-一定要搭配array-delete" tabindex="-1"><a class="header-anchor" href="#_8-8-array-new-一定要搭配array-delete"><span>8.8 array new 一定要搭配array delete</span></a></h3><p>delete [] 泄露的不是整块内存空间，而是array内部元素的析构函数只会被调用一次</p><blockquote><p>详情见《Effective C++》条款16：成对使用 new 和 delete 时要采取相同形式</p></blockquote><h2 id="_9-复习string类的实现过程" tabindex="-1"><a class="header-anchor" href="#_9-复习string类的实现过程"><span>9. 复习String类的实现过程</span></a></h2><h3 id="_9-1-string编程示例" tabindex="-1"><a class="header-anchor" href="#_9-1-string编程示例"><span>9.1 String编程示例</span></a></h3><p>这是一个有关 Class with pointer member(s) 的例子，要求：</p><ul><li>定义String class，声明默认构造、拷贝构造、拷贝赋值、析构函数、获取字符串函数，字符指针m_data。</li><li>实现默认构造：如果传进来的有初值，创建字符串大小+1的空间，再把字符串拷贝到开辟的空间；如果无初值，则开辟一个大小存放&quot;\\0&quot;。</li><li>拷贝构造：类似默认构造，把str的数据复制到m_data。</li><li>拷贝赋值：先自检，通过自检删除自己的数据，然后类似拷贝构造。</li><li>析构函数：直接删除数据。</li></ul><p>测试用例：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">str1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">str1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">str2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">str1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String str3 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str2 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str3 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>参考答案</summary><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">iostream</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">cstring</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> namespace</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> String</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cstr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">    String</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> operator</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> String</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> cstr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    ~String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    char*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> get_str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ostream</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> operator</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&lt;&lt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ostream</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> os</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> String</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cstr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> os </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> cstr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get_str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">inline</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        m_data </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strlen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        strcpy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        m_data </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        strcpy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">inline</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cstr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    m_data </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strlen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cstr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    strcpy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> cstr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">inline</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> String</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">operator</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> String</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cstr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cstr </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        delete[]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        m_data </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strlen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cstr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        strcpy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> cstr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">~</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    delete[]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> m_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">str1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">str1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">str2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">str1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String str3 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str2 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str3 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_9-2-copy-assignment-operator-拷贝赋值函數" tabindex="-1"><a class="header-anchor" href="#_9-2-copy-assignment-operator-拷贝赋值函數"><span>9.2 copy assignment operator (拷贝赋值函數)</span></a></h3><p>拷贝赋值与拷贝构造的不同：</p><ol><li>拷贝赋值需要先删除本身的东西，拷贝构造是未初始状态无需删除</li><li>拷贝赋值需要return *this，便于连续赋值</li><li>拷贝赋值需要自我检测</li></ol><blockquote><p>详情见《Effective C++》条款 10：令operator= 返回一个 reference to *this</p></blockquote><p>小细节：&amp;靠近typename的<code>String&amp; str</code>表示引用，&amp;靠近变量的<code>&amp;str</code>表示取地址。</p><h2 id="_10-扩展补充-类模板-函数模板-及其他" tabindex="-1"><a class="header-anchor" href="#_10-扩展补充-类模板-函数模板-及其他"><span>10. 扩展补充：类模板，函数模板，及其他</span></a></h2>`,18)),a(n,{src:"https://oss.ajohn.top/blog/pdf/oop1.pdf",page:79,zoom:50,width:"100%",height:"",ratio:"",title:"oop1.pdf"}),s[13]||(s[13]=h('<h3 id="_10-1-进一步补充-static" tabindex="-1"><a class="header-anchor" href="#_10-1-进一步补充-static"><span>10.1 进一步补充：static</span></a></h3><p>静态的数据和函数都只有一份，比如银行的利率，此外，静态成员函数没有this指针，只能处理静态数据。</p><p>调用static函数的方式：</p><ol><li>object调用 <code>a.set_rate(7.0);</code></li><li>class name调用 <code>Account::set_rate(5.0);</code></li></ol><h3 id="_10-2-进一步补充-cout" tabindex="-1"><a class="header-anchor" href="#_10-2-进一步补充-cout"><span>10.2 进一步补充：cout</span></a></h3><p>cout是一种输出流(ostream)对象，有巨多重载，因此可以打印诸如字符串、整型、无符号数各种各类的数据。</p><h3 id="_10-3-进一步补充-class-template-类模板" tabindex="-1"><a class="header-anchor" href="#_10-3-进一步补充-class-template-类模板"><span>10.3 进一步补充：class template, 类模板</span></a></h3><p>这里只做了简单介绍，用真实数据类型去替换T，比如类内的属性类型、成员函数返回类型、成员函数参数</p><h3 id="_10-4-进一步补充-function-template-函数模板" tabindex="-1"><a class="header-anchor" href="#_10-4-进一步补充-function-template-函数模板"><span>10.4 进一步补充：function template, 函数模板</span></a></h3><p>函数的返回类型和参数也可以模板化，比如比大小</p><h3 id="_10-5-进一步补充-namespace" tabindex="-1"><a class="header-anchor" href="#_10-5-进一步补充-namespace"><span>10.5 进一步补充：namespace</span></a></h3><p>使用关键字 <code>using</code> 来使用命名空间</p><h2 id="_11-组合与继承" tabindex="-1"><a class="header-anchor" href="#_11-组合与继承"><span>11. 组合与继承</span></a></h2>',13)),a(n,{src:"https://oss.ajohn.top/blog/pdf/oop1.pdf",page:89,zoom:50,width:"100%",height:"",ratio:"",title:"oop1.pdf"}),s[14]||(s[14]=h('<h3 id="_11-1-composition-复合-表示has-a" tabindex="-1"><a class="header-anchor" href="#_11-1-composition-复合-表示has-a"><span>11.1 Composition (复合), 表示has-a</span></a></h3><p>这里用queue（队列）和deque（双端队列）来举例子，class queue内声明了一个class deque，这是一种复合关系，用一个黑色实心菱形来表示。</p><img src="https://www.plantuml.com/plantuml/svg/JSen2e0m38NXFQS8ZeABu2e5lO1723Q8s4PDcqcykoY2RZ_lUovbqcmnG5fcsKWfelAOIQR0U02YhYQ-MrLOiMxW1FYy68oD2wI4-rr_wdb_oTy5y3omhAhsNHoBjnWk" alt=""><p>deque有很多功能，而queue只想取用一部分功能，而隐藏不需要的功能，这可以通过Adapter来实现。</p><p>复合(composition)的意义和public 继承完全不同在应用域(application domain)，复合意味has-a(有一个)。在实现域(implementation domain)，复合意味is-implemented-in-terms-of(根据某物实现出)。</p><blockquote><p>详情见《Effective C++》条款38：通过复合塑模出 has-a或&quot;根据某物实现出&quot;</p></blockquote><h3 id="_11-2-composition-复合-关系下的构造和析构" tabindex="-1"><a class="header-anchor" href="#_11-2-composition-复合-关系下的构造和析构"><span>11.2 Composition (复合) 关系下的构造和析构</span></a></h3><p>class Container 复合 class Component，那么构造由内而外，即先构造Component才能构造Container，析构由外而内，即先析构Container才能析构Component。</p><img src="https://www.plantuml.com/plantuml/svg/LSex2e1034NHFgi8beADO2k2AmaQH9nv8vbC9UxTHloKbtk6x69UOg2yhTZ59BBfv88bA1_4RAbW7fD1ZTkEJgBtLsE2omgrYYNpKtyIzmI5t-GkeaTptJJzvmoAkSHm0G00" alt="">',9)),a(l,{title:"Container"},{default:t(()=>[a(l,{title:"Component"})]),_:1}),s[15]||(s[15]=h('<h3 id="_11-3-delegation-委托-composition-by-reference" tabindex="-1"><a class="header-anchor" href="#_11-3-delegation-委托-composition-by-reference"><span>11.3 Delegation (委托). Composition by reference</span></a></h3><p>class String内有一个指针指向class StringRep，但是什么时候拥有这个class StringRep，还不知道，但我可以在任何我想要使用的时候，把任务委托给class StringRep，这就叫Delegation，也可以叫Composition by reference（术语通常把指针也叫reference）。</p><p>这种写法也叫编译防火墙，在客户端看来String没有变动，我们只需要修改StringRep，编译StringRep。</p><img src="https://www.plantuml.com/plantuml/svg/PSan2e0m343HFQS8xbq4LobuWtg2O8E8RLhITXBlxk1WmUtpdosLjBOOe9o7P5AAgBnLaZqmNe2egObVaWehZXFS09yFQzL3zW6fu9j_T9mxTvm1tiHapDnjo-9R30y0" alt=""><h3 id="_11-4-inheritance-继承-表示is-a" tabindex="-1"><a class="header-anchor" href="#_11-4-inheritance-继承-表示is-a"><span>11.4 Inheritance (继承), 表示is-a</span></a></h3><p>public 继承意味is-a。适用于base classes身上的每一件事情一定也适用于derived classes身上，因为每一个 derived class 对象也都是一个 base class 对象。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>尽可能使用复合，必要时才使用private 继承。</p></div><blockquote><p>详情见《Effective C++》条款32：确定你的 public 继承塑模出 is-a 关系<br> 详情见《Effective C++》条款39：明智而审慎地使用 private 继承</p></blockquote><h2 id="_12-虚函数与多态" tabindex="-1"><a class="header-anchor" href="#_12-虚函数与多态"><span>12. 虚函数与多态</span></a></h2>',9)),a(n,{src:"https://oss.ajohn.top/blog/pdf/oop1.pdf",page:96,zoom:50,width:"100%",height:"",ratio:"",title:"oop1.pdf"}),s[16]||(s[16]=h('<h3 id="_12-1-inheritance-继承-with-virtual-functions-虛函数" tabindex="-1"><a class="header-anchor" href="#_12-1-inheritance-继承-with-virtual-functions-虛函数"><span>12.1 Inheritance (继承) with virtual functions (虛函数)</span></a></h3><ul><li><p>non-virtual 函数：你不希望derived class 重新定义 (override, 覆写) 它.</p></li><li><p>virtual 函数：你<mark>希望</mark>derived class 重新定义 (override, 覆写) 它，且你对它已有默认定义。</p></li><li><p>pure virtual 函数：你希望 derived class <mark>一定</mark>要重新定义 (override, 覆写) 它，你对它没有默认定义</p></li></ul><blockquote><p>详情见《Effective C++》条款34：区分接口继承和实现继承</p></blockquote><h3 id="_12-2-inheritance-继承-with-virtual" tabindex="-1"><a class="header-anchor" href="#_12-2-inheritance-继承-with-virtual"><span>12.2 Inheritance (继承) with virtual</span></a></h3><p>前人实现了一个 CDocument ，把固定可以写的先写好，特殊化的操作留到 Serialize ，留给子类自己实现</p><p>CMyDoc 继承 CDocument ，仅需要根据自己的需求实现 Serialize 即可，这种写法是设计模式的Template Method。</p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKfCAYufIamkKKZEIImkLd1soKykpKtDAr6evb9GqFRFSylCIVKlICtJqEHIKAY6gQxL3aujoapCoQnArT3agkNYWkhshNJ9JuPeHLE0CDYcHbSNgfBB8JKlfJGt1m00" alt=""><h3 id="_12-3-inheritance-composition-关系下的构造和析构" tabindex="-1"><a class="header-anchor" href="#_12-3-inheritance-composition-关系下的构造和析构"><span>12.3 Inheritance + Composition 关系下的构造和析构</span></a></h3><ol><li>派生类内部有复合</li></ol>',9)),a(e,null,{default:t(()=>[s[0]||(s[0]=i("img",{src:"https://www.plantuml.com/plantuml/svg/LOj12i8m44NtSufFba8sGdSYmNgHeHbACPcKIU96lRi8HUlgm_llXThOMi-9wctHbOqpJAR6EYV1Wm0hNUDOJCLm7EX5zFlTXQkuFRYABNU9VsmiUIqgsXpH9y3fwJqsaxR5mViplYe5qTXpUWC0",alt:""},null,-1)),a(l,{title:"Derived"},{default:t(()=>[a(l,{title:"Base & Component"})]),_:1})]),_:1}),s[17]||(s[17]=i("p",null,"构造由内而外，Derived 的构造函数首先调用 Base 的 default 构造函数，然后调用 Component 的 default 构造函数，最后才执行自己。",-1)),s[18]||(s[18]=i("p",null,"析构由外而内，Derived 的析构函数首先执行自己，然后调用 Component 的析构函数，最后调用 Base 的析构函数。",-1)),s[19]||(s[19]=i("ol",{start:"2"},[i("li",null,"基类内部有复合")],-1)),a(e,null,{default:t(()=>[s[1]||(s[1]=i("img",{src:"https://www.plantuml.com/plantuml/svg/LSlB2eCm48NX_Jp5aAMGZT2TYAWlCZI3I9E9J99kshwxYCNBzZl_wL8cpILuIAzP5b8AgFpC99Dd_02YnY9kY2giM3_W1t3kfgV4vWeZw_ncTxCXXYKAIpO0sm6RhxNuBtUfh6tnwA1ZSINu5G00",alt:""},null,-1)),a(l,{title:"Derived"},{default:t(()=>[a(l,{title:"Base"},{default:t(()=>[a(l,{title:"Component"})]),_:1})]),_:1})]),_:1}),s[20]||(s[20]=i("p",null,"这种就比较直观，构造由内而外，析构由外而内",-1)),s[21]||(s[21]=i("h2",{id:"_13-delegation-委托-inheritance-继承",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_13-delegation-委托-inheritance-继承"},[i("span",null,"13. Delegation (委托) + Inheritance (继承)")])],-1)),s[22]||(s[22]=i("p",null,"委托相关设计",-1)),s[23]||(s[23]=i("h3",{id:"_13-1-1-observer",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_13-1-1-observer"},[i("span",null,"13.1.1 Observer")])],-1)),a(n,{src:"https://oss.ajohn.top/blog/pdf/oop1.pdf",page:102,zoom:50,width:"100%",height:"",ratio:"",title:"oop1.pdf"}),s[24]||(s[24]=i("p",null,"在 观察者模式 中，一个对象被称为 被观察者（Subject） ，它维持着一系列的依赖于它（观察者）的对象， 将有关状态的任何变更自动通知给他们（观察者）。",-1)),s[25]||(s[25]=i("p",null,"当一个目标需要告诉观察者发生了什么事情，它会向观察者广播一个通知（可以包括与通知主题相关的特定数据）。",-1)),s[26]||(s[26]=i("p",null,"当我们不在希望某个特定的观察者获得其注册目标发出的改变通知时，该目标可以将它从观察者列表中删除。",-1)),s[27]||(s[27]=i("h3",{id:"_13-1-2-composite",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_13-1-2-composite"},[i("span",null,"13.1.2 Composite")])],-1)),a(n,{src:"https://oss.ajohn.top/blog/pdf/oop1.pdf",page:105,zoom:50,width:"100%",height:"",ratio:"",title:"oop1.pdf"}),s[28]||(s[28]=i("p",null,"Composite（组合）模式 是一种结构型设计模式。",-1)),s[29]||(s[29]=i("p",null,"它用于将对象组织成树形结构，以表示 “部分-整体” 的层次关系。 它允许客户端以统一的方式处理单个对象和组合对象，忽略对象层次结构的差异。",-1)),s[30]||(s[30]=i("h3",{id:"_13-1-3-prototype",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_13-1-3-prototype"},[i("span",null,"13.1.3 Prototype")])],-1)),a(n,{src:"https://oss.ajohn.top/blog/pdf/oop1.pdf",page:106,zoom:50,width:"100%",height:"",ratio:"",title:"oop1.pdf"}),s[31]||(s[31]=i("p",null,"Prototype(原型)模式 是一种 创建型设计模式。",-1)),s[32]||(s[32]=i("p",null,"其核心思想是通过 复制现有对象（原型对象）来创建新对象，而不是通过类实例化。",-1))])}const A=k(g,[["render",y]]),B=JSON.parse('{"path":"/cpp/k43y0tzt/","title":"C++面向对象高级开发（上）","lang":"zh-CN","frontmatter":{"title":"C++面向对象高级开发（上）","createTime":"2025/09/04 17:43:17","permalink":"/cpp/k43y0tzt/","description":"1. C++编程简介","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++面向对象高级开发（上）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-28T11:44:01.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://www.ajohn.top/cpp/k43y0tzt/"}],["meta",{"property":"og:site_name","content":"AJohn Blog"}],["meta",{"property":"og:title","content":"C++面向对象高级开发（上）"}],["meta",{"property":"og:description","content":"1. C++编程简介"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-28T11:44:01.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-28T11:44:01.000Z"}]]},"readingTime":{"minutes":12.43,"words":3729},"git":{"createdTime":1757380058000,"updatedTime":1761651841000,"contributors":[{"name":"zzyAJohn","username":"zzyAJohn","email":"1833302139@qq.com","commits":3,"avatar":"https://avatars.githubusercontent.com/zzyAJohn?v=4","url":"https://github.com/zzyAJohn"}]},"autoDesc":true,"filePathRelative":"cpp/senior/oop1.md","headers":[]}');export{A as comp,B as data};
